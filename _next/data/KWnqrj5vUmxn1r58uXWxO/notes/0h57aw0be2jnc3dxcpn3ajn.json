{"pageProps":{"note":{"id":"0h57aw0be2jnc3dxcpn3ajn","title":"Rust","desc":"","updated":1745582188038,"created":1737625384436,"custom":{},"fname":"rust","type":"note","vault":{"fsPath":"vault"},"contentHash":"1a566bed83a720e2af556fc6a9746168","links":[],"anchors":{"functions":{"type":"header","text":"Functions","value":"functions","line":8,"column":0,"depth":2},"crates":{"type":"header","text":"Crates","value":"crates","line":20,"column":0,"depth":2},"doc":{"type":"header","text":"Doc","value":"doc","line":24,"column":0,"depth":2},"shadowing":{"type":"header","text":"Shadowing","value":"shadowing","line":32,"column":0,"depth":2},"questions":{"type":"header","text":"Questions","value":"questions","line":44,"column":0,"depth":2},"iif-expressions":{"type":"header","text":"Iif Expressions","value":"iif-expressions","line":81,"column":0,"depth":2},"data-types":{"type":"header","text":"Data types","value":"data-types","line":87,"column":0,"depth":2},"scalar":{"type":"header","text":"Scalar","value":"scalar","line":93,"column":0,"depth":3},"integers":{"type":"header","text":"integers","value":"integers","line":97,"column":0,"depth":4},"compound":{"type":"header","text":"Compound","value":"compound","line":108,"column":0,"depth":3},"the-slice-type":{"type":"header","text":"The Slice type","value":"the-slice-type","line":151,"column":0,"depth":2},"vectors":{"type":"header","text":"Vectors","value":"vectors","line":155,"column":0,"depth":2},"ownership":{"type":"header","text":"Ownership","value":"ownership","line":168,"column":0,"depth":2},"stck-versus-heap":{"type":"header","text":"Stck versus heap","value":"stck-versus-heap","line":179,"column":0,"depth":3},"ownership-rules":{"type":"header","text":"Ownership rules","value":"ownership-rules","line":189,"column":0,"depth":4},"variable-scope":{"type":"header","text":"Variable scope","value":"variable-scope","line":195,"column":0,"depth":4},"references-and-borrowing":{"type":"header","text":"References and borrowing","value":"references-and-borrowing","line":211,"column":0,"depth":2},"structs":{"type":"header","text":"Structs","value":"structs","line":243,"column":0,"depth":2},"tuple-structs":{"type":"header","text":"Tuple structs","value":"tuple-structs","line":251,"column":0,"depth":3},"unit-like-structs":{"type":"header","text":"Unit-like structs","value":"unit-like-structs","line":258,"column":0,"depth":3},"method-syntax":{"type":"header","text":"Method syntax","value":"method-syntax","line":270,"column":0,"depth":2},"enums":{"type":"header","text":"Enums","value":"enums","line":299,"column":0,"depth":2},"match-control-flow-construct":{"type":"header","text":"match control flow construct","value":"match-control-flow-construct","line":323,"column":0,"depth":3},"catch-all-patterns-and-the-_-placeholder":{"type":"header","text":"catch all patterns and the _ placeholder","value":"catch-all-patterns-and-the-_-placeholder","line":374,"column":0,"depth":3},"if-let-when-match-gets-a-bit-wordy-":{"type":"header","text":"if let (when match get's a bit wordy ...)","value":"if-let-when-match-gets-a-bit-wordy-","line":391,"column":0,"depth":3},"pattern-syntax":{"type":"header","text":"Pattern syntax","value":"pattern-syntax","line":400,"column":0,"depth":3},"extra-conditionals-with-match-guards":{"type":"header","text":"Extra conditionals with Match guards.","value":"extra-conditionals-with-match-guards","line":456,"column":0,"depth":3},"strings":{"type":"header","text":"Strings","value":"strings","line":460,"column":0,"depth":2},"traits":{"type":"header","text":"Traits","value":"traits","line":465,"column":0,"depth":2},"the-orphan-rule":{"type":"header","text":"The orphan rule","value":"the-orphan-rule","line":471,"column":0,"depth":3},"modules":{"type":"header","text":"Modules","value":"modules","line":476,"column":0,"depth":2},"hash-maps":{"type":"header","text":"Hash Maps","value":"hash-maps","line":478,"column":0,"depth":2},"overwritting-a-value":{"type":"header","text":"Overwritting a value","value":"overwritting-a-value","line":491,"column":0,"depth":4},"adding-value-only-if-absent":{"type":"header","text":"Adding value only if absent","value":"adding-value-only-if-absent","line":499,"column":0,"depth":4},"iterators":{"type":"header","text":"Iterators","value":"iterators","line":509,"column":0,"depth":2}},"children":["0yclga8bza62x1ip1wzgkie"],"parent":"QvYK9hGbCvPpEfSRYhV8j","data":{}},"body":"<h1 id=\"rust\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#rust\"></a>Rust</h1>\n<h2 id=\"functions\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#functions\"></a>Functions</h2>\n<p>Rust is an expression based language.</p>\n<ul>\n<li><strong>Statements</strong> are instructions that perform some action but do not return a value.</li>\n</ul>\n<p>e.g. <code>let x = 6;</code></p>\n<ul>\n<li><strong>Expressions</strong> evaluate to a resulting value.</li>\n</ul>\n<p>e.g. <code>x + 1</code></p>\n<h2 id=\"crates\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#crates\"></a>Crates</h2>\n<p>They are collection of rust code files. They are binary crates and library crates. Library crates contains code to be used in other programs an not on its own.</p>\n<h2 id=\"doc\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#doc\"></a>Doc</h2>\n<p>If you don't remeber which traits and functions are available in your codebase you can run </p>\n<pre class=\"language-bash\"><code class=\"language-bash\">cargo doc --open\n</code></pre>\n<h2 id=\"shadowing\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#shadowing\"></a>Shadowing</h2>\n<p>This is convenient when you want to reuse a variable without having to come up with a new name. </p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> x <span class=\"token operator\">=</span> x <span class=\"token operator\">*</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"questions\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#questions\"></a>Questions</h2>\n<p>What exactly is a variant. How is that different from a trait ?</p>\n<p>Define </p>\n<ul>\n<li>type</li>\n<li>trait</li>\n<li>struct</li>\n<li>enum</li>\n<li>variant</li>\n<li>module</li>\n<li>crate</li>\n<li>arms: an arm consist of a pattern to be matched agaisnt and the code to be run if the pattern is matched.</li>\n</ul>\n<p>For example</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> guess<span class=\"token punctuation\">:</span> <span class=\"token keyword\">u32</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">match</span> guess<span class=\"token punctuation\">.</span><span class=\"token function\">trim</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">parse</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Ok</span><span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> num<span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Err</span><span class=\"token punctuation\">(</span>_<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>This is also the case in an if statement. Each blocks of code associated to the if and else are called arms.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> number <span class=\"token operator\">=</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> number <span class=\"token operator\">&#x3C;</span> <span class=\"token number\">5</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"condition was true\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"condition was false\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"iif-expressions\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iif-expressions\"></a>Iif Expressions</h2>\n<p>In rust, if should be associated to a boolean. </p>\n<p>When you have more than one <code>else if</code> expression you might want to refactor your code. Rust has a powerful branching construct called <code>match</code> for these cases.</p>\n<h2 id=\"data-types\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#data-types\"></a>Data types</h2>\n<p>Two types of data types in Rust:</p>\n<ul>\n<li>scalar</li>\n<li>compound</li>\n</ul>\n<h3 id=\"scalar\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#scalar\"></a>Scalar</h3>\n<p>Represents a single value. Rust has four primary scalar types: integers, floating-point numbers, Booleans, and characters.</p>\n<h4 id=\"integers\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#integers\"></a>integers</h4>\n<p>Signed or unsigned. Signed can be negative or positive. Unsigned can only be positive.</p>\n<p>Char</p>\n<p>specified with single quote </p>\n<p>e.g <code>let c = 'z';</code>\nunlike strings which are specified with double quotes.</p>\n<h3 id=\"compound\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#compound\"></a>Compound</h3>\n<ul>\n<li>tuples\ncannot grow or shrink. fixed lenght.\ne.g. <code>let tup: (i32, f64, u8) = (500, 6.4, 1);</code></li>\n</ul>\n<p>To access values of the tuple we destructure it</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> tup <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> z<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> tup<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The value of y is: {}\"</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Another way to acess elements of the tupple is by using the index</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> x<span class=\"token punctuation\">:</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">f64</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">u8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">500</span><span class=\"token punctuation\">,</span> <span class=\"token number\">6.4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> five_hundred <span class=\"token operator\">=</span> x<span class=\"token number\">.0</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> six_point_four <span class=\"token operator\">=</span> x<span class=\"token number\">.1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> one <span class=\"token operator\">=</span> x<span class=\"token number\">.2</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<ul>\n<li>arrays</li>\n</ul>\n<p>Unlike tupples, every element must be of the same type. They are fixed lenght. </p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>To acess elements of an array we use the index</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">,</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">let</span> first <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> second <span class=\"token operator\">=</span> a<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"the-slice-type\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-slice-type\"></a>The Slice type</h2>\n<h2 id=\"vectors\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#vectors\"></a>Vectors</h2>\n<p>These are similar to arrays but can grow or shrink in size.\nThey are stored in the heap rather than the stack which is the case for arrays.</p>\n<p>Vectors can only store data of the same type.</p>\n<p>The vec! macro is used to create a vector.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h2 id=\"ownership\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ownership\"></a>Ownership</h2>\n<p>Ownership is a set of rule governing how Rust manages memory.</p>\n<p>Three possibilities for programming languanges:</p>\n<ul>\n<li>their is garbage collection periodically </li>\n<li>the programmer must explicitily allocate and free memory</li>\n<li>memory is managed through a system of <strong>ownership</strong> with a set of rules checked by the compiler (rust)</li>\n</ul>\n<h3 id=\"stck-versus-heap\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#stck-versus-heap\"></a>Stck versus heap</h3>\n<p>Think of stack as a pile of plates. <em>last in, first out.</em> You dont remove stuff from in between.\nYopu <em>push onto the stack</em> or <em>pop off the stack</em>. All data on the stack must have known, fixed size.</p>\n<p>On the hep, its different and less organized. The memory allocator check for a big enough spacem marks it as beeing in use and returns a <em>pointer.</em> This is called <em>allocating.</em> Because the pointer is know, fixed sized, you can in turn store it on the stack. </p>\n<p>Pushing on the stack is much quicker because you just have to add stuff on top. No time wasted in finding free space.\nSimilarly acccessing data on the stack is quicker.</p>\n<h4 id=\"ownership-rules\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#ownership-rules\"></a>Ownership rules</h4>\n<ul>\n<li>each values in Rust as an owner.</li>\n<li>There can be only one owner at a time.</li>\n<li>When the owner goes out of scope, the value will be dropped.</li>\n</ul>\n<h4 id=\"variable-scope\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#variable-scope\"></a>Variable scope</h4>\n<p>The scope is the range within the programm for which an item is valid.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\">    <span class=\"token punctuation\">{</span>                      <span class=\"token comment\">// s is not valid here, it’s not yet declared</span>\n        <span class=\"token keyword\">let</span> s <span class=\"token operator\">=</span> <span class=\"token string\">\"hello\"</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// s is valid from this point forward</span>\n\n        <span class=\"token comment\">// do stuff with s</span>\n    <span class=\"token punctuation\">}</span>                      <span class=\"token comment\">// this scope is now over, and s is no longer valid</span>\n</code></pre>\n<p>What happens behind the scenes is that rust's <code>drop</code> function is automatically runned at the closing opf the curly brackets.</p>\n<h2 id=\"references-and-borrowing\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#references-and-borrowing\"></a>References and borrowing</h2>\n<p>A reference is like a pointer in the sense that it is an adress to be followed to acess the data stored at this adress (data owned by another variable). But unlike a pointer, a reference is guaranteed to point to a valid value of a particular type for the life of that reference.</p>\n<p>The ampersands represent a reference e.g <code>&#x26;s1</code>. Here you refer to some value, without taking ownership.</p>\n<p><code>*</code>is the <em>dereferencing</em> operator.</p>\n<p>Because we nevere had ownership when using a reference, we do not need to return the values from a function to give back ownership.\nThe creation of a reference is called <em>borrowing</em>.\nLike in real life, if a person owns something, you can, sometimes, borrow it. When you are done you give it back, because you dont own it.</p>\n<p>You cannot modify stuff you borrow if it is not mutable. However you can make mutable references.\nOne big restriction: if you have a mutable reference to a value, you cannot meke another reference to that value.</p>\n<p>This allows rust to prevent data race condition.</p>\n<p>This happens in the three sceanrii:</p>\n<ul>\n<li>two or more pointers access the same data at the same time.</li>\n<li>at least one of the pointers is beeing used to write to the data</li>\n<li>no mechanism used to synchronize acess to the data.</li>\n</ul>\n<p>Rules of references.</p>\n<ul>\n<li>at any given time you can have either one mutable reference or any number of immutable references.</li>\n<li>references must always be valid.</li>\n</ul>\n<h2 id=\"structs\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#structs\"></a>Structs</h2>\n<p>Structs are similar to Tuples.\nLike tuples pieces of a struct can be different.\nUnlioke tuples, in a Struct youll name each piece of data (these are called fields)</p>\n<p>Once created, structs can be instantiated.</p>\n<h3 id=\"tuple-structs\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#tuple-structs\"></a>Tuple structs</h3>\n<p>e.g. </p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">Color</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<h3 id=\"unit-like-structs\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#unit-like-structs\"></a>Unit-like structs</h3>\n<p>Even simpler: they are things such as Unit-like structs.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">struct</span> <span class=\"token type-definition class-name\">AlwaysEqual</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> subject <span class=\"token operator\">=</span> <span class=\"token class-name\">AlwaysEqual</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h2 id=\"method-syntax\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#method-syntax\"></a>Method syntax</h2>\n<p>Methods are like functions but unlike functions they are defined within the context of a <em>struct</em> (or an <strong>enum</strong> or a <strong>trait</strong> object).\nThere first parameter is always self, which respresnets the instance of the struct the method is beeing called on.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">impl</span> <span class=\"token class-name\">Rectangle</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">area</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u32</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">*</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>height\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">width</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">></span> <span class=\"token number\">0</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">can_hold</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token keyword\">self</span><span class=\"token punctuation\">,</span> other<span class=\"token punctuation\">:</span> <span class=\"token operator\">&#x26;</span><span class=\"token class-name\">Rectangle</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">bool</span> <span class=\"token punctuation\">{</span>\n       <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>width <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>width <span class=\"token operator\">&#x26;&#x26;</span> <span class=\"token keyword\">self</span><span class=\"token punctuation\">.</span>height <span class=\"token operator\">></span> other<span class=\"token punctuation\">.</span>height\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>These methods are called <strong>associated functions</strong>, they are indeed associated to the struct Rectangle.\nWe can define associated function that DO NOT have self as their first parameters (they are thus not methods.9 because they do not need an instance of the type to work with.</p>\n<p>These associated functions which are not methods are often used for constructors that will return a new instance of the structs.</p>\n<h2 id=\"enums\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#enums\"></a>Enums</h2>\n<p><em>Enums</em> allow to define a type by enumerating its possible <em>variants.</em>\nOption is a particularly usefull enum. Encodes that a value can be either something or nothing.\nPattern matching using match makes it easy to run different code for different values of an enum.</p>\n<p>One very common enum in rust is Option</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token class-name\">T</span><span class=\"token operator\">></span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">None</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">T</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>You can even directly </p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> some_number <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> absent_number<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Option</span><span class=\"token operator\">&#x3C;</span><span class=\"token keyword\">i32</span><span class=\"token operator\">></span> <span class=\"token operator\">=</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Option has a large number of associated methods that can be checked at <a href=\"https://doc.rust-lang.org/std/option/enum.Option.html\">https://doc.rust-lang.org/std/option/enum.Option.html</a></p>\n<h3 id=\"match-control-flow-construct\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#match-control-flow-construct\"></a>match control flow construct</h3>\n<p>You can thing of match as a coin sorting machine. The coins slide down a ramp with holes of incresaing size. The first hole fitting size sorts the condition.\nthink of it as conditional expression with if. But the big difference is that it doesnt need to be a boolean.</p>\n<p>Remeber that the match arms are made by two parts :</p>\n<ul>\n<li>a pattern </li>\n<li>some code</li>\n</ul>\n<p>separtaed by => </p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Coin</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Penny</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Nickel</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Dime</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Quarter</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">value_in_cents</span><span class=\"token punctuation\">(</span>coin<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">-></span> <span class=\"token keyword\">u8</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">match</span> coin <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Penny</span> <span class=\"token operator\">=></span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Nickel</span> <span class=\"token operator\">=></span> <span class=\"token number\">5</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Dime</span> <span class=\"token operator\">=></span> <span class=\"token number\">10</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Coin</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Quarter</span> <span class=\"token operator\">=></span> <span class=\"token number\">25</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Combining mathc and enums is extremely frequent pattern in rust programming.</p>\n<p>fn plus_one(x: Option<i32>) -> Option<i32> {\nmatch x {\nNone => None,\nSome(i) => Some(i + 1),\n}\n}</i32></i32></p>\n<p>fn main() {\nlet five = Some(5);\nlet six = plus_one(five);\nlet none = plus_one(None);</p>\n<pre><code>println!(\"six is {:#?} and none is {:#?}\", six, none);\n</code></pre>\n<p>}</p>\n<p>Matches in Rust are <em>exhaustive</em>: all the cases must be covered.</p>\n<h3 id=\"catch-all-patterns-and-the-_-placeholder\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#catch-all-patterns-and-the-_-placeholder\"></a>catch all patterns and the _ placeholder</h3>\n<p>This is usefull when you which to aplly and action to some patterns but then apply the same action for the rest of the cases (i.e. a default action)</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> config_max <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">match</span> config_max <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum is configured to be {max}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>The last arms catches all other possible cases. We are exhaustive and covered. The empty tuples means no action is taken.</p>\n<h3 id=\"if-let-when-match-gets-a-bit-wordy-\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#if-let-when-match-gets-a-bit-wordy-\"></a>if let (when match get's a bit wordy ...)</h3>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> config_max <span class=\"token operator\">=</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3u8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span> <span class=\"token keyword\">let</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span>max<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> config_max <span class=\"token punctuation\">{</span>\n    <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"The maximum is configured to be {max}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<h3 id=\"pattern-syntax\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#pattern-syntax\"></a>Pattern syntax</h3>\n<p>Patterns can be used to destructure struct, enums and tuples and use differents parts of these values.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> p <span class=\"token operator\">=</span> <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">7</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> p <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On the x axis at {x}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On the y axis at {y}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token class-name\">Point</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">,</span> y <span class=\"token punctuation\">}</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"On neither axis: ({x}, {y})\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>Destructuring can work on nested object (here enums)</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Color</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Rgb</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">enum</span> <span class=\"token type-definition class-name\">Message</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\">Quit</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Move</span> <span class=\"token punctuation\">{</span> x<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span><span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">:</span> <span class=\"token keyword\">i32</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">Write</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">String</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">fn</span> <span class=\"token function-definition function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> msg <span class=\"token operator\">=</span> <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token number\">160</span><span class=\"token punctuation\">,</span> <span class=\"token number\">255</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">match</span> msg <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Rgb</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">,</span> g<span class=\"token punctuation\">,</span> b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change color to red {r}, green {g}, and blue {b}\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token class-name\">Message</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">ChangeColor</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">Color</span><span class=\"token punctuation\">::</span><span class=\"token class-name\">Hsv</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n            <span class=\"token macro property\">println!</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Change color to hue {h}, saturation {s}, value {v}\"</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">}</span>\n        _ <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n</code></pre>\n<p>If you are not going to use a variable yet but want to ignore it. you prefix by _</p>\n<p>fn main() {\nlet _x = 5;\nlet y = 10;\n}</p>\n<h3 id=\"extra-conditionals-with-match-guards\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#extra-conditionals-with-match-guards\"></a>Extra conditionals with Match guards.</h3>\n<p>A match guards is and additional if condition specified after the pattern in a match arms.Usefull to express complex logic when patterns are not enough.</p>\n<h2 id=\"strings\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#strings\"></a>Strings</h2>\n<p><code>String</code> is actually implemented as a wrapper around a vector of bytes with some extra guarantees, restrictions and capabilities.</p>\n<h2 id=\"traits\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#traits\"></a>Traits</h2>\n<p>Shared functionalities across data types.\nSimilar to \"interfaces\" in other languages</p>\n<h3 id=\"the-orphan-rule\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#the-orphan-rule\"></a>The orphan rule</h3>\n<p>Other crates that depend on the aggregator crate can also bring the Summary trait into scope to implement Summary on their own types. One restriction to note is that we can implement a trait on a type only if either the trait or the type, or both, are local to our crate. For example, we can implement standard library traits like Display on a custom type like Tweet as part of our aggregator crate functionality because the type Tweet is local to our aggregator crate. We can also implement Summary on Vec<t> in our aggregator crate because the trait Summary is local to our aggregator crate.\n<strong>But we can’t implement external traits on external types</strong>. For example, we can’t implement the Display trait on Vec<t> within our aggregator crate because Display and Vec<t> are both defined in the standard library and aren’t local to our aggregator crate. This restriction is part of a property called coherence, and more specifically the orphan rule, so named because the parent type is not present. This rule ensures that other people’s code can’t break your code and vice versa. Without the rule, two crates could implement the same trait for the same type, and Rust wouldn’t know which implementation to use.</t></t></t></p>\n<h2 id=\"modules\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#modules\"></a>Modules</h2>\n<h2 id=\"hash-maps\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#hash-maps\"></a>Hash Maps</h2>\n<p>these are equivalent to Python's dictionnaries, also called associative arrays in other languages.</p>\n<p>HashMap&#x3C;K, V>\nStored on the heap.</p>\n<p>Like Vectors, HashMaps are homegeneous, all of the keys miust have the same </p>\n<p>The HashMaps takes owner ship of the values insert inside.\nYou put them there by hashmap.insert(k, v)</p>\n<h4 id=\"overwritting-a-value\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#overwritting-a-value\"></a>Overwritting a value</h4>\n<p>if we\nhashmap.insert(k, v1)\nhashmap.insert(k, v2)</p>\n<p>v1 is overwritten</p>\n<h4 id=\"adding-value-only-if-absent\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#adding-value-only-if-absent\"></a>Adding value only if absent</h4>\n<p>hashmap.insert(k, v1)</p>\n<p>hashmap.entry(k1).or_insert(v2)\nhashmap.entry(k).or_insert(v2)</p>\n<p>v1 is not overwritten because its already present</p>\n<h2 id=\"iterators\"><a aria-hidden=\"true\" class=\"anchor-heading icon-link\" href=\"#iterators\"></a>Iterators</h2>\n<p>Iterators are lazy. They do not do anything until you call a method that consumes the iterator.\nThis is called <em>consuming an iterator</em>.\nThe iterator trait is called Iterator. It has a method called next() which returns an Option<t>.</t></p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&#x26;</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>Closure and map on iterators</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> plus_one <span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>plus_one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">Some</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>iter<span class=\"token punctuation\">.</span><span class=\"token function\">next</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token class-name\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>collect() is a method that consumes the iterator and returns a collection.</p>\n<pre class=\"language-rust\"><code class=\"language-rust\"><span class=\"token keyword\">let</span> v <span class=\"token operator\">=</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> v<span class=\"token punctuation\">.</span><span class=\"token function\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> plus_one <span class=\"token operator\">=</span> <span class=\"token closure-params\"><span class=\"token closure-punctuation punctuation\">|</span>x<span class=\"token closure-punctuation punctuation\">|</span></span> x <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> <span class=\"token keyword\">mut</span> iter <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">map</span><span class=\"token punctuation\">(</span>plus_one<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">let</span> v<span class=\"token punctuation\">:</span> <span class=\"token class-name\">Vec</span><span class=\"token operator\">&#x3C;</span>_<span class=\"token operator\">></span> <span class=\"token operator\">=</span> iter<span class=\"token punctuation\">.</span><span class=\"token function\">collect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">assert_eq!</span><span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">,</span> <span class=\"token macro property\">vec!</span><span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n</code></pre>\n<p>The collect() method is a powerful way to transform an iterator into a collection. It can be used to create a vector, a hash map, or any other collection type that implements the FromIterator trait.</p>\n<hr>\n<strong>Children</strong>\n<ol>\n<li><a href=\"/commons-dws-public/notes/0yclga8bza62x1ip1wzgkie\">Ressources</a></li>\n</ol>","noteIndex":{"id":"QvYK9hGbCvPpEfSRYhV8j","title":"Welcome to the COMMONS Lab Open Dendron","desc":"","updated":1693056226815,"created":1630130450048,"custom":{"nav_order":0,"permalink":"/"},"fname":"root","type":"note","vault":{"fsPath":"vault"},"contentHash":"20f67df3dd870fc450a162c202c9ff41","links":[{"type":"wiki","from":{"fname":"root","id":"QvYK9hGbCvPpEfSRYhV8j","vaultName":"vault"},"value":"open-notebook.commons.setup","position":{"start":{"line":43,"column":118,"offset":1871},"end":{"line":43,"column":149,"offset":1902},"indent":[]},"xvault":false,"sameFile":false,"to":{"fname":"open-notebook.commons.setup"}}],"anchors":{"what-is-this-note":{"type":"header","text":"What is this note","value":"what-is-this-note","line":16,"column":0,"depth":2},"tutorial":{"type":"header","text":"Tutorial","value":"tutorial","line":20,"column":0,"depth":2},"dendron":{"type":"header","text":"Dendron.","value":"dendron","line":22,"column":0,"depth":3},"what-is-dendron-":{"type":"header","text":"What is Dendron ?","value":"what-is-dendron-","line":24,"column":0,"depth":4},"where-to-get-more-info-on-dendron-":{"type":"header","text":"Where to get more info on Dendron ?","value":"where-to-get-more-info-on-dendron-","line":30,"column":0,"depth":4},"concrete-steps-to-access-and-contribute-to-the-dbgi-dendron":{"type":"header","text":"Concrete steps to access and contribute to the DBGI Dendron","value":"concrete-steps-to-access-and-contribute-to-the-dbgi-dendron","line":35,"column":0,"depth":4},"questions-comments-suggestions-":{"type":"header","text":"Questions, comments, suggestions ?","value":"questions-comments-suggestions-","line":52,"column":0,"depth":2}},"children":["5o0tvzf4l6t6moau7en1v48","e4ul30admmxm9ilxfq275cq","h78qbvh1fd9bwcykmcm9uo3","6ooxuf27zzf3grb14o18qf2","tiqo5upbg6224t7i8p87iok","ltq8wcrabmq6mlescrdi4m0","bdq3suiz8yriznljea2zpug","ih6vyup3yre4m9woc9ldl7k","vDTgZL9UHWqYtBFdtD3vK","69ekb2qhuwukr0jwrzy6tnw","373694o1o6ocqohko4um7c9","jldFUSJGjDf1mFH8c2yUI","dh2qp7w4tl6otf89xrmxitv","2rvdf4t5qnx5hqjj29bojcc","stj9lq0lxhfuk5ntomiozz0","gvdyfgvq0z08fcfaqzmhtjo","2rvclk21kfedpvxuzjpizi7","dcwgamgyghrlyau1avlh6ug","432qdutuo1i8h5pcuh39ytt","2npxodkvs5jk6p1eksi551b","h81rw16zzgh9kix8ti1mbam","lco50o42dfeph5i5f2k981w","46d1odkovrpdi6g16992phy","s9gzk7nphtjzmpdqvk5y4vj","82ra6p4ykf814hp8yfw4wp6","hpnaglyhnb48vuiniqecnqf","y7nk7xmiht44neo0q7cl5cs","2cxr093kvrg4jojokwgqrbj","8vfu5h3617jbzy78xr2hlo1","w75krbmkkvla3hwd66hn5bh","40po5od17ekcr1e77dluxao","4pqppog2u66rx1tkc8jy5v9","ektni5nfulyro7dkrbtek7j","vfsp2aci6vy7kg2jsyy8tzu","0wm4geq40t6nscn88rcwu47","ib4jmxy1x3l1r0ewe6hln4j","0h57aw0be2jnc3dxcpn3ajn","4789z8f1dqdh5k3nmgr1m4z","p5dszyuhj1klgje0brtv0xj","sk4m9gq7vz2t9phcxlxvqpw","43p60vv8btyhaclugl93jok","zhc9hhpaobkbo4e2votv6wr","ylulfzi7ra5yv6ja7j78t6e","wj0i9czxvt4v0b674nb8501","ovslc641d0h00s16tf6kl8w","4zmlbmcp6q4q69ycvhavzr6","59ftsVxFXXM9bB43vfKwK","nmnpsy2e1rwqnqgurogi2u6","6b5uf8hv44mbgircddcb46i","s9j6c26u6qgl5dvnqv8opam","je0ksq927btmorptaje6a4p","xm4a1smh9gcahxda5bssxfi","3cgqlppr4es3iuoa2o3mhn8","d6edcr5j5kjgdt791uujpn0","zfu2gniwqhgo1j44r3yfx7y","gap1pjhvt94m5izg0zlef0w","o3y0vguickctv1yx4z42qev","g78c0e4ts7wgkof1ykkgzbl","hsqldiv7revakz0fqay51eu","99wwtyhexdqu5bxrtgn9whw","m8e37qw6n4i3cfv9ohq7e82","ds1s2fjqhwvw1zqst8l4z4f","ec4pkybo5iwljo3zdr9894x","cbikmu2vjnxulf5tf9xfist","1icb0ka0yjwpoerg4zym9la"],"parent":null,"data":{},"body":"\n![](/assets/images/allard-lab.jpg)\n\nWelcome the the COMMONS Lab Open Dendron !\n\nIn the [COMMONS Lab](https://www.unifr.ch/bio/en/groups/allard/) we intent to follow the [Open Notebook Science](https://en.wikipedia.org/wiki/Open-notebook_science) approach to document our research.\n\nFor this we use the [Dendron](https://www.dendron.so/) system as a mean to efficiently capture notes and publish them.\n\n## What is this note\n\nThis note is a succinct tutorial note aiming to get you started in the use of the COMMONS Lab Dendron.\n\n## Tutorial\n\n### Dendron. \n\n#### What is Dendron ?\n\n> Dendron is an open-source, local-first, markdown-based, note-taking tool. Think of it as a cache for everything that you care about - if you've spent more then five minutes solving a problem, you should never spent any more time solving the same exact problem.\n> \n> Dendron is a knowledge base built by and for developers and integrates natively with IDEs like VS Code and VSCodium.\n\n#### Where to get more info on Dendron ?\n\n- You can get more information in the Dendron system at the official website www.dendron.so\n- All the Dendron documentation is hosted here https://wiki.dendron.so/. It is, obviously, a Dendron itself.\n\n#### Concrete steps to access and contribute to the DBGI Dendron\n\n1. Install [VSCode](https://code.visualstudio.com/download)\n2. Install [Dendron](https://marketplace.visualstudio.com/items?itemName=dendron.dendron) from the VSCode marketplace \n3. Clone the COMMONS Dendron repo\n\n    In your terminal\n    ```\n    git clone https://github.com/commons-research/commons-dws-public.git\n    ```\n4. In VSCode open (File/Open) the cloned repository.\n5. Voila ! You should now be in the COMMONS Lab Open Dendron.\n\nFeel free to explore and contribute.\nA first, important step could be to configure VSCode so that you can easily add a daily note. See steps described at [[open-notebook.commons.setup]]\n\n\n## Questions, comments, suggestions ?\n\nFeel free to contribute here https://github.com/orgs/commons-research/discussions\n\n"},"collectionChildren":null,"customHeadContent":null,"config":{"version":5,"dev":{"enablePreviewV2":true},"commands":{"lookup":{"note":{"selectionMode":"extract","confirmVaultOnCreate":false,"leaveTrace":false,"bubbleUpCreateNew":true,"vaultSelectionModeOnCreate":"smart","fuzzThreshold":0.2}},"insertNote":{"initialValue":"templates"},"insertNoteLink":{"aliasMode":"none","enableMultiSelect":false},"insertNoteIndex":{"enableMarker":false},"randomNote":{},"copyNoteLink":{"aliasMode":"title"},"templateHierarchy":"template"},"workspace":{"vaults":[{"fsPath":"vault"}],"journal":{"dailyDomain":"daily","name":"journal","dateFormat":"y.MM.dd","addBehavior":"childOfDomain"},"scratch":{"name":"scratch","dateFormat":"y.MM.dd.HHmmss","addBehavior":"asOwnDomain"},"graph":{"zoomSpeed":1,"createStub":false},"enableAutoCreateOnDefinition":false,"enableXVaultWikiLink":false,"enableRemoteVaultInit":true,"workspaceVaultSyncMode":"noCommit","enableAutoFoldFrontmatter":false,"maxPreviewsCached":10,"maxNoteLength":204800,"task":{"name":"","dateFormat":"","addBehavior":"childOfCurrent","statusSymbols":{"":" ","wip":"w","done":"x","assigned":"a","moved":"m","blocked":"b","delegated":"l","dropped":"d","pending":"y"},"prioritySymbols":{"H":"high","M":"medium","L":"low"},"todoIntegration":false,"createTaskSelectionType":"selection2link","taskCompleteStatus":["done","x"]},"enableUserTags":true,"enableHashTags":true,"dendronVersion":"0.112.0","enableEditorDecorations":true,"enableFullHierarchyNoteTitle":false},"preview":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"automaticallyShowPreview":false,"enableFrontmatterTags":true,"enableHashesForFMTags":false},"publishing":{"enableFMTitle":true,"enableNoteTitleForLink":true,"enableMermaid":true,"enablePrettyRefs":true,"enableKatex":true,"assetsPrefix":"/commons-dws-public","copyAssets":true,"siteHierarchies":["root"],"enableSiteLastModified":true,"siteRootDir":"docs","siteUrl":"https://commons-research.github.io","enableFrontmatterTags":true,"enableHashesForFMTags":false,"enableRandomlyColoredTags":true,"duplicateNoteBehavior":{"action":"useVault","payload":["vault"]},"writeStubs":false,"seo":{"title":"COMMONS DWS Public","description":"Personal knowledge space"},"github":{"enableEditLink":true,"editLinkText":"Click here to edit this page on Github !","editBranch":"main","editViewMode":"edit","editRepository":"https://github.com/commons-research/commons-dws-public"},"enablePrettyLinks":true,"enableTaskNotes":true,"siteFaviconPath":"favicon.ico","siteIndex":"root","searchMode":"lookup"}}},"__N_SSG":true}